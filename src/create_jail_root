#!/bin/sh

echo_stderr () {
	echo "$*" >&2
}

echo_verbose () {
	if [ $verbose -ne 0 ]; then
		echo "$*"
	fi
}


show_usage_and_exit ()  {
	cat 1>&2 <<EOF 
Usage: $(basename $0) [options] <target-directory>
	Options:
	-a <architecture>: specify architecture to download and install.  
	        Default: the host's architecture as provided by uname -m
	-f <files>: comma-separated list of files to be copied from host
	        Default: /etc/localtime,/etc/resolv.conf - use -f '' to turn
		off copying of files
	-n: dry run - print parameters (with -v) and check target-directory but
	        don't actually do anything
	-p <packages>: comma-separated list of packages to download 
	        (e.g.  base,src,lib32) - no spaces, no file extensions
		Default: base
	-r <release>: specify the release to download and install 
		(e.g.  10.3-RELEASE or 10.3).
		Note: only -RELEASE version are usually provided so the -RELEASE
		will automatically be appended if you specify just 10.3
		Default: the host's release as provided by uname -r
	-s: compare installed files to sha256 checksums using freebsd-update IDS
	        Default: off
	-v: verbose, print all parameters before starting to download

	The following uppercase options specify to only execute the specified step - mostly for debugging
	-D: download
	-V: verify downloaded files
	-E: extract
	-U: update using freebsd-update
	-S: check using freebsd-update IDS
	-F: copy host files
EOF
	exit 1
}


download_file () {
	url=$1
	output_dir=$2
	echo "Downloading $1"
	fetch -q -m -o "$output_dir" "$url" 
	if [ $? -ne 0 ]; then
		echo_stderr "Unable to download $1"
		exit 3
	fi

}

verify_checksum () {
	packagefile=$1
	dir=$2
	echo "Verifying checksum for $packagefile"
	checksum=$(grep $packagefile "$dir/MANIFEST"|cut -f 2)
	if [ $? -ne 0 -o -z "$checksum" ]; then
		echo_stderr "Unable to find checksum for $packagefile in $dir/MANIFEST"
		exit 4
	fi
	new_checksum=$(/sbin/sha256 -q -c $checksum "$dir/$packagefile")
	if [ $? -ne 0 ]; then
		echo_stderr "Computed checksum $new_checksum does not match expected checksum $checksum - aborting"
		exit 4
	fi

}

get_release_version () {
	grep -E -o '^[0-9]+\.[0-9]+'
}

get_host_release () {
	uname -r | get_release_version
}

parse_options () {

	while getopts "a:f:np:r:svDEFSUV" opt; do
		case $opt in
			a)
				architecture="$OPTARG"
				;;
			f)
				files="$OPTARG"
				;;
			n)
				dryrun=1
				;;
			p)
				packages="$OPTARG"
				;;
			r)
				release="$OPTARG"
				;;
			s)
				do_verify_root=1
				;;
			v)
				verbose=1
				;;
			D) 
				do_all=0
				do_download=1
				;;
			E)
				do_all=0
				do_extract=1
				;;
			F)
				do_all=0
				do_files=1
				;;
			S)
				do_all=0
				do_verify_root=1
				;;
			U)
				do_all=0
				do_update=1
				;;
			V)
				do_all=0
				do_verify=1
				;;
			\?)
				show_usage_and_exit
				;;
			:)
				echo_stderr "Option -$OPTARG requires an argument."
				show_usage_and_exit
				;;
		esac
	done

	shift "$((OPTIND-1))" # Shift off the options and optional --.

	if [ $# -eq 1 ]; then
		target_directory=$1
	fi
}

validate_option_release () {
	if [ -z "$release" ]; then
		echo_stderr "No release specified (-r)"
		show_usage_and_exit
	fi
	release=$(echo $release | get_release_version)-RELEASE
	echo_verbose "Release: $release"

}

validate_option_architecture () {
	if [ -z "$architecture" ]; then
		echo_stderr "No architecture specified (-a)"
		show_usage_and_exit
	fi
	echo_verbose "Architecture: $architecture"

}

validate_option_target_directory () {
	if [ -z "$target_directory" ]; then
		echo_stderr "No target directory specified"
		show_usage_and_exit
	fi

	echo_verbose "Target directory: $target_directory"

	if test ! -d "$target_directory"; then 
		echo "ERROR: target directory '$target_directory' does not exist"
		exit 2
	fi

}

validate_option_mirror () {
	echo_verbose "Mirror: $mirror"

}

validate_option_packages () {
	if [ -z "$packages" ]; then
		echo_stderr "Package list must not be empty"
		show_usage_and_exit
	fi

	if [ $verbose -ne 0 ]; then
		echo_verbose "Packages:"
		IFS=,
		for package in $packages; do
			echo_verbose " - $package"
		done
		unset IFS
	fi

}


validate_option_files () {
	if [ $verbose -ne 0 ]; then
		echo_verbose "Files to copy:"
		IFS=,
		for file in $files; do
			echo_verbose " - $file"
		done
		unset IFS
	fi

	IFS=,
	for file in $files; do
		if [ ! -r $file ]; then
			echo_stderr "File $file should be copied to new root but does not exist or is not readable"
			exit 1
		fi
	done
	unset IFS

}

download_packages () {
	ftp_dir="$mirror/pub/FreeBSD/releases/$architecture/$architecture/$release"

	mkdir -p "$downloads_dir"

	download_file "$ftp_dir/MANIFEST" "$downloads_dir"
	IFS=,
	for package in $packages; do
		download_file "$ftp_dir/$package.txz" "$downloads_dir"
	done
	unset IFS

}

verify_packages () {
	IFS=,
	for package in $packages; do
		verify_checksum "$package.txz" "$downloads_dir"
	done
	unset IFS

}

extract_package () {
	package=$1
	echo "Extracting $package"
	tar xf "$downloads_dir/$package.txz" -C "$target_directory" 
	if [ $? -ne 0 ]; then
		echo_stderr "Unable to extract $downloads_dir/$package.txz"
		exit 5
	fi
}


extract_packages () {
	IFS=,
	for package in $packages; do
		extract_package $package
	done
	unset IFS

}

save_architecture () {
	# save architecture for use by freebsd-update-jail
	echo $architecture > "$target_directory/etc/jail_architecture"
}

update_root () {
	echo "Running freebsd-update"
	old_version=$("$target_directory/bin/freebsd-version" -u)
	PAGER=cat "$BIN/freebsd-update-jail" $target_directory fetch install > /dev/null
	if [ $? -ne 0 ]; then
		echo_stderr "freebsd-update failed"
		exit 6
	fi
	new_version=$("$target_directory/bin/freebsd-version" -u)
	echo "Updated $target_directory from $old_version to $new_version"

}


verify_root () {
	echo "Verifying installed root using freebsd-update"
	"$BIN/freebsd-update-jail" $target_directory IDS | grep 'but should have'
	if [ $? -eq 0 ]; then
		echo_stderr "freebsd-update failed to verify"
		exit 7
	fi

}


copy_files () {
	echo "Copying files"
	IFS=,
	for file in $files; do
		dir=$(dirname "$file")
		mkdir -p "$target_directory/$dir"
		cp "$file" "$target_directory/$file"
	done
	unset IFS

}


target_directory=""
release=$(get_host_release)
architecture=$(uname -m)
verbose=0
dryrun=0
mirror="ftp://ftp.de.freebsd.org"
packages="base"
cache_dir=/var/tmp/create_jail_root
files=/etc/localtime,/etc/resolv.conf

BIN=$(dirname "$0")

do_all=1
do_download=0
do_verify=0
do_extract=0
do_update=0
do_verify_root=0
do_files=0

parse_options "$@"

validate_option_target_directory
validate_option_architecture
validate_option_release
validate_option_mirror
validate_option_packages
validate_option_files

if [ $dryrun -ne 0 ]; then
	echo "Dry run only - not doing anything"
	exit 0
fi

downloads_dir="$cache_dir/$architecture/$release"

if [ $do_all -eq 1 -o $do_download -eq 1 ]; then
	download_packages
fi

if [ $do_all -eq 1 -o $do_verify -eq 1 ]; then
	verify_packages
fi

if [ $do_all -eq 1 -o $do_extract -eq 1 ]; then
	extract_packages
	save_architecture
fi

if [ $do_all -eq 1 -o $do_update -eq 1 ]; then
	update_root
fi

if [ $do_verify_root -eq 1 ]; then
	verify_root
fi

if [ $do_all -eq 1 -o $do_files -eq 1 ]; then
	copy_files
fi


